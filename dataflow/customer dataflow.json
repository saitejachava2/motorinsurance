{
	"name": "customer dataflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_customerdata",
						"type": "DatasetReference"
					},
					"name": "customerdata"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_customerdata_trans",
						"type": "DatasetReference"
					},
					"name": "sinkcustomerdata"
				}
			],
			"transformations": [
				{
					"name": "renamecolumns"
				},
				{
					"name": "filterlesscreditscore"
				},
				{
					"name": "removeunwantedcolumns"
				},
				{
					"name": "rankbyrisk"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Customer_ID as string,",
				"          Policy_ID as short,",
				"          Age as short,",
				"          Occupation as string,",
				"          Education as string,",
				"          Credit_Score as double,",
				"          Fraud_Risk_Score as double,",
				"          CCJs as short,",
				"          DUI as boolean,",
				"          Claims_Count as short,",
				"          Traffic_Violations as boolean,",
				"          Licence as string,",
				"          Driver1_LicenceYears as short,",
				"          Driver1_LicenceRecord as short,",
				"          Driver1_Claims_Count as short",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> customerdata",
				"customerdata select(mapColumn(",
				"          each(match(true()),",
				"               \"motor_\"+$$ = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> renamecolumns",
				"renamecolumns filter(motor_Credit_Score>=99.9) ~> filterlesscreditscore",
				"filterlesscreditscore select(mapColumn(",
				"          motor_Customer_ID,",
				"          motor_Policy_ID,",
				"          motor_Age,",
				"          motor_Education,",
				"          motor_Credit_Score,",
				"          motor_Fraud_Risk_Score,",
				"          motor_CCJs,",
				"          motor_Claims_Count,",
				"          motor_Licence,",
				"          motor_Driver1_LicenceYears,",
				"          motor_Driver1_LicenceRecord,",
				"          motor_Driver1_Claims_Count",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> removeunwantedcolumns",
				"removeunwantedcolumns rank(asc(motor_Fraud_Risk_Score, true),",
				"     output(riskrankasc as long)) ~> rankbyrisk",
				"rankbyrisk sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['transcustomer.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sinkcustomerdata"
			]
		}
	}
}