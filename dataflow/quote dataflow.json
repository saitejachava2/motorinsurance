{
	"name": "quote dataflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_quotedata",
						"type": "DatasetReference"
					},
					"name": "quotedata"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_monthlyquote_trans",
						"type": "DatasetReference"
					},
					"name": "sinkmonthlyquotes"
				},
				{
					"dataset": {
						"referenceName": "ds_yearlyquote_trans",
						"type": "DatasetReference"
					},
					"name": "sinkyearlyquotedata"
				}
			],
			"transformations": [
				{
					"name": "renamecloumns"
				},
				{
					"name": "addtypeandtransmission"
				},
				{
					"name": "removeunwantedcolumns"
				},
				{
					"name": "deleteoldvechicles"
				},
				{
					"name": "filtercreditscore"
				},
				{
					"name": "splitbasedonpayment"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Customer_ID as string,",
				"          Purchase_Date as date,",
				"          Cover_Start_Date as date,",
				"          Cover_End_Date as date,",
				"          Period_of_Cover as short,",
				"          LOB as string,",
				"          Broker as string,",
				"          Age as short,",
				"          Occupation as string,",
				"          Income as integer,",
				"          Marital_Status as string,",
				"          Premium as double,",
				"          Vehicle_Type as string,",
				"          Vehicle_Brand as string,",
				"          Vehicle_Age as short,",
				"          Vehicle_Value as double,",
				"          Vehicle_Use as string,",
				"          Vehicle_Mileage as double,",
				"          NCD as boolean,",
				"          Number_of_Drivers as short,",
				"          Driver1_Age as short,",
				"          Driver2_Age as short,",
				"          Driver1_LicenceYears as short,",
				"          Driver2_LicenceYears as short,",
				"          Driver1_LicenceRecord as short,",
				"          Driver2_LicenceRecord as short,",
				"          Driver1_Claims_Count as short,",
				"          Driver2_Claims_Count as short,",
				"          Location_Risk as double,",
				"          Daytime_Parking as string,",
				"          Overnight_Parking as string,",
				"          Telematics as double,",
				"          Credit_Score as double,",
				"          Fraud_Risk_Score as double,",
				"          CCJs as short,",
				"          Sale_Flag as boolean,",
				"          Claims_Count as short,",
				"          Vehicle_Engine as double,",
				"          Vehicle_HP as double,",
				"          Saftey_ABS as boolean,",
				"          Saftey_ESC as boolean,",
				"          Saftey_TCS as boolean,",
				"          Saftey_Rear_Camera as boolean,",
				"          Antitheft_Immobilizer as boolean,",
				"          Antitheft_Alarm as boolean,",
				"          Antitheft_Remote_Locking as boolean,",
				"          Antitheft_Steering_Wheel_Locks as boolean,",
				"          Antitheft_GPS_Tracking as boolean,",
				"          Fuel_Type as string,",
				"          Transmission as string,",
				"          Coverage_Type as string,",
				"          Area_Type as string,",
				"          Insurance_Type as string,",
				"          Payment_Type as string,",
				"          Traffic_Violations as boolean,",
				"          DUI as boolean,",
				"          Education as string,",
				"          Licence as string,",
				"          Channel as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> quotedata",
				"quotedata select(mapColumn(",
				"          each(match(true()),",
				"               \"motor_\"+$$ = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> renamecloumns",
				"renamecloumns derive(motor_type = motor_Fuel_Type+\" \"+motor_Transmission) ~> addtypeandtransmission",
				"addtypeandtransmission select(mapColumn(",
				"          motor_Customer_ID,",
				"          motor_Purchase_Date,",
				"          motor_Cover_Start_Date,",
				"          motor_Cover_End_Date,",
				"          motor_LOB,",
				"          motor_Broker,",
				"          motor_Age,",
				"          motor_Income,",
				"          motor_Marital_Status,",
				"          motor_Premium,",
				"          motor_Vehicle_Type,",
				"          motor_Vehicle_Brand,",
				"          motor_Vehicle_Age,",
				"          motor_Vehicle_Value,",
				"          motor_Vehicle_Use,",
				"          motor_Vehicle_Mileage,",
				"          motor_NCD,",
				"          motor_Number_of_Drivers,",
				"          motor_Driver1_Age,",
				"          motor_Driver2_Age,",
				"          motor_Driver1_LicenceYears,",
				"          motor_Driver2_LicenceYears,",
				"          motor_Driver1_LicenceRecord,",
				"          motor_Driver2_LicenceRecord,",
				"          motor_Driver1_Claims_Count,",
				"          motor_Driver2_Claims_Count,",
				"          motor_Location_Risk,",
				"          motor_Daytime_Parking,",
				"          motor_Overnight_Parking,",
				"          motor_Telematics,",
				"          motor_Credit_Score,",
				"          motor_Fraud_Risk_Score,",
				"          motor_CCJs,",
				"          motor_Sale_Flag,",
				"          motor_Claims_Count,",
				"          motor_Vehicle_Engine,",
				"          motor_Vehicle_HP,",
				"          motor_Saftey_ABS,",
				"          motor_Saftey_ESC,",
				"          motor_Saftey_TCS,",
				"          motor_Saftey_Rear_Camera,",
				"          motor_Antitheft_Immobilizer,",
				"          motor_Antitheft_Alarm,",
				"          motor_Antitheft_Remote_Locking,",
				"          motor_Antitheft_Steering_Wheel_Locks,",
				"          motor_Antitheft_GPS_Tracking,",
				"          motor_Coverage_Type,",
				"          motor_Area_Type,",
				"          motor_Insurance_Type,",
				"          motor_Payment_Type,",
				"          motor_Education,",
				"          motor_Licence,",
				"          motor_Channel,",
				"          motor_type",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> removeunwantedcolumns",
				"removeunwantedcolumns alterRow(deleteIf(motor_Vehicle_Age>=15)) ~> deleteoldvechicles",
				"deleteoldvechicles filter(motor_Credit_Score>=100) ~> filtercreditscore",
				"filtercreditscore split(motor_Payment_Type==\"Monthly\",",
				"     disjoint: false) ~> splitbasedonpayment@(Monthly, Yearly)",
				"splitbasedonpayment@Monthly sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['monthlyquote.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sinkmonthlyquotes",
				"splitbasedonpayment@Yearly sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['yearlyquote.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sinkyearlyquotedata"
			]
		}
	}
}